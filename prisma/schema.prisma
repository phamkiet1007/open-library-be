generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}

model User {
  userId             Int                     @id @default(autoincrement())
  username           String                  @unique
  email              String                  @unique
  password           String
  address            String
  created_at         DateTime                @default(now())
  email_verification EmailVerificationStatus @default(NOT_VERIFIED)
  role               Role                    @default(MEMBER)
  firstName          String?
  lastName           String?
  cart               Cart?
  orders             Order[]
  ratings            Rating[]
  verificationToken  VerificationToken[]
}

model Book {
  bookId             Int            @id @default(autoincrement())
  title              String
  author             String
  price              Float
  quantity_available Int
  coverImage         String
  created_at         DateTime       @default(now())
  description        String
  filePath           String
  format             BookFormat     @default(PAPERBACK)
  isAvailableOnline  Boolean        @default(false)
  isbn               String         @unique
  previewPages       Int?           @default(20)
  publishDate        DateTime
  publisher          String
  updated_at         DateTime       @updatedAt
  averageRating      Float?
  totalRatings       Int?           @default(0)
  categories         BookCategory[]
  cartItems          CartItem[]
  orderItems         OrderItem[]
  ratings            Rating[]
}

model Category {
  categoryId Int            @id @default(autoincrement())
  name       String         @unique
  books      BookCategory[]
}

model BookCategory {
  bookId     Int
  categoryId Int
  book       Book     @relation(fields: [bookId], references: [bookId], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@id([bookId, categoryId])
}

model Rating {
  ratingId   Int      @id @default(autoincrement())
  bookId     Int
  userId     Int
  rating     Float
  review     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book       Book     @relation(fields: [bookId], references: [bookId], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([bookId, userId])
}

model Order {
  orderId      Int         @id @default(autoincrement())
  userId       Int
  order_date   DateTime    @default(now())
  total_amount Float
  status       String
  user         User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  orderItems   OrderItem[]
  payments     Payment[]
}

model OrderItem {
  orderItemId    Int   @id @default(autoincrement())
  orderId        Int
  bookId         Int
  quantity       Int
  price_per_unit Float
  book           Book  @relation(fields: [bookId], references: [bookId], onDelete: Cascade)
  order          Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}

model Payment {
  paymentId      Int      @id @default(autoincrement())
  orderId        Int
  amount         Float
  payment_date   DateTime @default(now())
  payment_method String
  transaction_id String   @unique
  order          Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  userId    Int        @unique
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  cartItemId Int  @id @default(autoincrement())
  cartId     Int
  bookId     Int
  quantity   Int
  book       Book @relation(fields: [bookId], references: [bookId], onDelete: Cascade)
  cart       Cart @relation(fields: [cartId], references: [cartId], onDelete: Cascade)

  @@unique([cartId, bookId])
}

enum Role {
  MEMBER
  ADMIN
}

enum EmailVerificationStatus {
  VERIFIED
  NOT_VERIFIED
}

enum BookFormat {
  HARDCOVER
  PAPERBACK
  EBOOK
}
